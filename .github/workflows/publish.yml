name: Publish Package

on:
  push:
    branches: [ main ]
  release:
    types: [created]

jobs:
  publish:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
        cache: 'maven'
        server-id: ossrh
        server-username: ${{ secrets.OSSRH_USERNAME }}
        server-password: ${{ secrets.OSSRH_TOKEN }}
        gpg-private-key: ${{ secrets.GPG_PRIVATE_KEY }}
        gpg-passphrase: ${{ secrets.GPG_PASSPHRASE }}
        settings-path: ${{ github.workspace }}

    - name: Set Version
      id: set_version
      uses: actions/github-script@v4
      if: github.event_name == 'release'
      with:
        script: |
          const noRef = context.ref.replace('refs/tags/', '')
          const noPrefix = noRef.replace('v', '')
          core.setOutput('version', noPrefix)

    - name: Build with Maven
      run: mvn -B package --file pom.xml
      
    - name: Run tests
      run: mvn -B test --file pom.xml
      
    - name: Check code style
      run: mvn -B checkstyle:check --file pom.xml
      
    - name: Generate Javadoc
      run: mvn -B javadoc:javadoc --file pom.xml

    - name: Publish to Maven Central
      run: |
        if [ "${{ github.event_name }}" == "release" ]; then
          mvn --batch-mode versions:set -DnewVersion=${{ steps.set_version.outputs.version }}
        fi
        mvn --batch-mode deploy -P release
      env:
        MAVEN_USERNAME: ${{ secrets.OSSRH_USERNAME }}
        MAVEN_PASSWORD: ${{ secrets.OSSRH_TOKEN }}
        MAVEN_GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}

    - name: Wait for Maven Central Sync
      if: github.event_name == 'release'
      run: |
        echo "Waiting for artifacts to sync to Maven Central..."
        # Wait for up to 30 minutes (180 * 10 seconds)
        for i in {1..180}; do
          STATUS=$(curl -s -o /dev/null -w "%{http_code}" https://repo1.maven.org/maven2/com/notificationapi/notificationapi-java-server-sdk/${{ steps.set_version.outputs.version }}/)
          if [ $STATUS -eq 200 ]; then
            echo "✅ Artifacts found in Maven Central!"
            break
          fi
          echo "Attempt $i: Artifacts not yet available (status: $STATUS). Waiting 10 seconds..."
          sleep 10
        done
        if [ $STATUS -ne 200 ]; then
          echo "❌ Timeout waiting for artifacts to appear in Maven Central"
          exit 1
        fi

    - name: Verify Maven Central Artifacts
      if: github.event_name == 'release'
      run: |
        VERSION=${{ steps.set_version.outputs.version }}
        BASE_URL="https://repo1.maven.org/maven2/com/notificationapi/notificationapi-java-server-sdk/$VERSION/notificationapi-java-server-sdk-$VERSION"
        
        # List of expected files
        FILES=(".jar" ".jar.asc" ".pom" ".pom.asc" "-javadoc.jar" "-javadoc.jar.asc" "-sources.jar" "-sources.jar.asc")
        
        echo "Verifying all artifacts for version $VERSION..."
        for FILE in "${FILES[@]}"; do
          URL="$BASE_URL$FILE"
          HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" $URL)
          if [ $HTTP_CODE -eq 200 ]; then
            echo "✅ Found $FILE"
          else
            echo "❌ Missing $FILE (HTTP $HTTP_CODE)"
            exit 1
          fi
        done
        echo "✅ All required artifacts verified in Maven Central!"

