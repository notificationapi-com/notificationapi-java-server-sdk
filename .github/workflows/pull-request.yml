name: Pull Request Pipeline

on:
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        java: [ '11', '17' ]

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up JDK ${{ matrix.java }}
      uses: actions/setup-java@v3
      with:
        java-version: ${{ matrix.java }}
        distribution: 'temurin'
        cache: 'maven'
        server-id: central
        server-username: ${{ secrets.OSSRH_USERNAME }}
        server-password: ${{ secrets.OSSRH_TOKEN }}
        gpg-private-key: ${{ secrets.GPG_PRIVATE_KEY }}
        gpg-passphrase: ${{ secrets.GPG_PASSPHRASE }}
        settings-path: ${{ github.workspace }}/.mvn

    - name: Build with Maven
      run: mvn -B package --file pom.xml
      
    - name: Run tests
      run: mvn -B test --file pom.xml
      
    - name: Check code style
      run: mvn -B checkstyle:check --file pom.xml
      
    - name: Generate Javadoc
      run: mvn -B javadoc:javadoc --file pom.xml
        
    - name: Deploy package
      run: |
        # Import the GPG key
        echo -n "${{ secrets.GPG_PRIVATE_KEY }}" | gpg --batch --import
        # Configure GPG to use a non-interactive pinentry
        mkdir -p ~/.gnupg
        echo "use-agent" > ~/.gnupg/gpg.conf
        echo "pinentry-mode loopback" >> ~/.gnupg/gpg.conf
        echo "allow-loopback-pinentry" > ~/.gnupg/gpg-agent.conf
        # Get the key ID
        export GPG_KEY_ID=$(gpg --list-secret-keys --keyid-format LONG | grep sec | awk '{print $2}' | cut -d'/' -f2)
        echo "Using GPG key: $GPG_KEY_ID"
        # Deploy with explicit key configuration
        mvn clean deploy -P release \
          -Dgpg.passphrase=${{ secrets.GPG_PASSPHRASE }} \
          -Dgpg.keyname=$GPG_KEY_ID
      env:
        MAVEN_USERNAME: ${{ secrets.OSSRH_USERNAME }}
        MAVEN_PASSWORD: ${{ secrets.OSSRH_TOKEN }}
        GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}

